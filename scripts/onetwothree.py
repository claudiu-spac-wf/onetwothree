import argparse
import os

def exec(args, extraArgsString):
    iniFilename = os.path.abspath(args.ini_file.name)
    pfFilename = os.path.abspath(args.parameters_file.name)
    logFilename = "" if args.log_filename == None else os.path.abspath(args.log_filename.name)
        
    cmd = f"{args.dlc}/bin/_progres.exe -b -ininame {iniFilename} -pf {pfFilename} -p ScriptEntryPoint.p -param \"{args.cmd},{args.log_level},{logFilename},{extraArgsString}\""
    #print(cmd)
    os.system(cmd)

def cfg(args):
    outputFilename = os.path.abspath(args.output_file.name)
    extraArgsString = f"tableMatchers={args.table_matchers_string},indexMatchers={args.index_matchers_string},output={outputFilename}"
    exec(args, extraArgsString)

def gen(args):
    outputFolder = os.path.join(os.path.abspath(os.getcwd()), args.output_folder)
    if not os.path.exists(outputFolder):
        os.makedirs(outputFolder)

    outputFolder = os.path.abspath(outputFolder)
    configFile = os.path.abspath(args.config_file.name)

    extraArgsString = f"output={outputFolder},configFile={configFile}"

    exec(args, extraArgsString)

def run(args):
    outputFolder = os.path.join(os.path.abspath(os.getcwd()), args.generated_code_folder)
    outputFolder = os.path.abspath(outputFolder)

    extraArgsString = f"generatedCodeFolder={outputFolder}"
    exec(args, extraArgsString)


if __name__ == "__main__":
    mainParser = argparse.ArgumentParser(add_help=False)
    mainParser.add_argument('cmd', choices=['cfg', 'gen', 'run'], help='The command to be ran. These will generate the needed config for the connected datbases, generate the code that will be used to obtain stats, and run the generated code respectively')
    mainParser.add_argument('-pf', '--parameters-file', type=argparse.FileType('r'), default=os.path.join(os.path.dirname(os.path.abspath(__file__)), "db_conn.pf"), help='The .pf file used to connect to the database(s) against which the code will be ran. Defaults to db_conn.pf')
    mainParser.add_argument('-ini', '--ini-file', type=argparse.FileType('r'), default=os.path.join(os.path.dirname(os.path.abspath(__file__)), "onetwothree.ini"), help='The .ini file used set the propath. Defaults to onetwothree.ini')
    mainParser.add_argument('-ll','--log-level', choices=['error','warning','info','debug'], default="warning", help='The log level to be used. Defaults to warning', required=False)
    mainParser.add_argument('-lf','--log-filename', type=argparse.FileType('w'), default=None, help='When set logging will be redirected to that file instead of showing up in the terminall', required=False)
    mainParser.add_argument('-dlc', default=os.environ['DLC'], help='The DLC location. If not specified it will used the environment DLC variable', required=False)

    try:
        mainArgs = mainParser.parse_known_args()[0]
    except:
        print()
        mainParser.print_help()
        exit()
    
    parser = argparse.ArgumentParser(parents=[mainParser])

    match mainArgs.cmd:
        case 'cfg':
            parser.add_argument('-tm', '--table-matchers-string', default="", help='A comma separated list of matches. If a table meets one of them, it will be included. Example: CSTCust*,*order', required=False)
            parser.add_argument('-im', '--index-matchers-string', default="", help='A comma separatec list of matches. If an index meets one of them, it will be included. Example: idxCustOrd*:2:5 This matches indexes beginning with idxCustOrd with a number of fields between 2 and 5. ', required=False)
            parser.add_argument('-o','--output-file', type=argparse.FileType('w'), default="config.json", help="The file where to output the generated config", required=False)

        case 'gen':
            parser.add_argument('-cfg', '--config-file', type=argparse.FileType('r'), default="config.json", help='The .json file generated by running this script with the cfg command. Defaults to config.json')
            parser.add_argument('-o','--output-folder', default="gen", help="The folder where to output the generated code", required=False)

        case 'run':
            parser.add_argument('-g','--generated-code-folder', default="gen", help="The folder where generated code was output by a previous gen run of this tool", required=False)

    args = parser.parse_args()

    match args.cmd:
        case 'cfg':
            cfg(args)

        case 'gen':
            gen(args)

        case 'run':
            run(args)